{"ast":null,"code":"function bugs(state = {\n  bugs: []\n}, action) {\n  switch (action.type) {\n    case \"ADD_BUG\":\n      return {\n        allBugs: [...state.allBugs, action.bug]\n      };\n\n    case \"LOAD_BUGS\":\n      // return { allBugs: state.bugs.concat(action.bugs) };\n      return {\n        allBugs: action.bugs\n      };\n\n    case \"EDIT_BUG\":\n      const updatedBugs = state.allBugs.map(bug => {\n        return bug.bugId === action.bug.bugId ? action.bug : bug;\n      });\n      return { ...state,\n        allBugs: updatedBugs\n      };\n\n    case \"DELETE_BUG\":\n      return {\n        allBugs: state.allBugs.filter(bug => bug.bugId !== action.bug.bugId)\n      };\n\n    case \"SET_ACTIVE_BUG\":\n      return { ...state,\n        activeBug: action.bug\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default bugs;","map":{"version":3,"sources":["/Users/cameronkingsley/Flatiron/code/Projects/Phase5-React-Cyberbug/Phase5-React-Cyberbug/cyberbug_frontend/src/reducers/bugsReducer.js"],"names":["bugs","state","action","type","allBugs","bug","updatedBugs","map","bugId","filter","activeBug"],"mappings":"AAAA,SAASA,IAAT,CACEC,KAAK,GAAG;AACND,EAAAA,IAAI,EAAE;AADA,CADV,EAIEE,MAJF,EAKE;AACA,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,SAAL;AACE,aAAO;AAAEC,QAAAA,OAAO,EAAE,CAAC,GAAGH,KAAK,CAACG,OAAV,EAAmBF,MAAM,CAACG,GAA1B;AAAX,OAAP;;AACF,SAAK,WAAL;AACE;AACA,aAAO;AAAED,QAAAA,OAAO,EAAEF,MAAM,CAACF;AAAlB,OAAP;;AACF,SAAK,UAAL;AACE,YAAMM,WAAW,GAAGL,KAAK,CAACG,OAAN,CAAcG,GAAd,CAAmBF,GAAD,IAAS;AAC7C,eAAOA,GAAG,CAACG,KAAJ,KAAcN,MAAM,CAACG,GAAP,CAAWG,KAAzB,GAAiCN,MAAM,CAACG,GAAxC,GAA8CA,GAArD;AACD,OAFmB,CAApB;AAGA,aAAO,EAAE,GAAGJ,KAAL;AAAYG,QAAAA,OAAO,EAAEE;AAArB,OAAP;;AACF,SAAK,YAAL;AACE,aAAO;AACLF,QAAAA,OAAO,EAAEH,KAAK,CAACG,OAAN,CAAcK,MAAd,CAAsBJ,GAAD,IAASA,GAAG,CAACG,KAAJ,KAAcN,MAAM,CAACG,GAAP,CAAWG,KAAvD;AADJ,OAAP;;AAGF,SAAK,gBAAL;AACE,aAAO,EAAE,GAAGP,KAAL;AAAYS,QAAAA,SAAS,EAAER,MAAM,CAACG;AAA9B,OAAP;;AACF;AACE,aAAOJ,KAAP;AAlBJ;AAoBD;;AAED,eAAeD,IAAf","sourcesContent":["function bugs(\n  state = {\n    bugs: [],\n  },\n  action\n) {\n  switch (action.type) {\n    case \"ADD_BUG\":\n      return { allBugs: [...state.allBugs, action.bug] };\n    case \"LOAD_BUGS\":\n      // return { allBugs: state.bugs.concat(action.bugs) };\n      return { allBugs: action.bugs };\n    case \"EDIT_BUG\":\n      const updatedBugs = state.allBugs.map((bug) => {\n        return bug.bugId === action.bug.bugId ? action.bug : bug;\n      });\n      return { ...state, allBugs: updatedBugs };\n    case \"DELETE_BUG\":\n      return {\n        allBugs: state.allBugs.filter((bug) => bug.bugId !== action.bug.bugId),\n      };\n    case \"SET_ACTIVE_BUG\":\n      return { ...state, activeBug: action.bug };\n    default:\n      return state;\n  }\n}\n\nexport default bugs;\n"]},"metadata":{},"sourceType":"module"}