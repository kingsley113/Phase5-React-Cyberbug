{"ast":null,"code":"// Single Project Functions\n// Open Bugs\nexport const openBugCount = (project, bugs) => {\n  let bugCount = 0;\n\n  if (bugs) {\n    for (const bug of bugs) {\n      if (bug.project_id === project.id && bug.bugStatus !== \"Complete\") {\n        bugCount += 1;\n      }\n    }\n  }\n\n  return bugCount;\n}; // Overdue Bugs\n\nexport const overdueBugCount = (project, bugs) => {\n  let bugCount = 0;\n  const date = new Date();\n\n  if (bugs) {\n    for (const bug of bugs) {\n      if (bug.bugDueDate) {\n        const dueDate = new Date(bug.bugDueDate);\n\n        if (bug.project_id === project.id && dueDate < date && bug.bugStatus !== \"Complete\") {\n          bugCount += 1;\n        }\n      }\n    }\n  }\n\n  return bugCount;\n}; // Closed Bugs\n\nexport const closedBugCount = (project, bugs) => {\n  let bugCount = 0;\n\n  if (bugs) {\n    for (const bug of bugs) {\n      if (bug.project_id === project.id && bug.bugStatus === \"Complete\") {\n        bugCount += 1;\n      }\n    }\n  }\n\n  return bugCount;\n}; // Total Bugs\n\nexport const totalBugCount = (project, bugs) => {\n  let bugCount = 0;\n\n  if (bugs) {\n    for (const bug of bugs) {\n      if (bug.project_id === project.id) {\n        bugCount += 1;\n      }\n    }\n  }\n\n  return bugCount;\n}; // Project Health\n\nexport const projectHealth = (project, bugs) => {\n  if (project && bugs) {\n    const openBugs = openBugCount(project, bugs);\n    const totalBugs = totalBugCount(project, bugs);\n    const score = (totalBugs - openBugs) / totalBugs;\n    const percent = Math.round(score * 100);\n    return percent;\n  }\n}; // Project Status Bar Percents\n\nexport const generateProjectStatusBarData = (project, bugs) => {\n  if (project && bugs) {\n    // open bug %\n    const openCount = openBugCount(project, bugs); // overdue bug %\n\n    const overdueCount = overdueBugCount(project, bugs); // closed bug %\n\n    const closedCount = closedBugCount(project, bugs); // these 3 need to add up to 100%\n\n    const totalBugsCount = totalBugCount(project, bugs);\n    const openPercent = Math.round((openCount - overdueCount) / totalBugsCount * 100);\n    const overduePercent = Math.round(overdueCount / totalBugsCount * 100);\n    const closedPercent = Math.round(closedCount / totalBugsCount * 100);\n    return [openPercent, overduePercent, closedPercent];\n  }\n}; // Multiple Projects Functions\n\nexport const generatePieChartData = (projects, bugs) => {\n  // Return an array of arrays, each sub array needs to have first value = project id and 2nd = count\n  let chartData = [[\"Bug\", \"Count\"]];\n\n  if (projects) {\n    for (const project of projects) {\n      const data = [project.projectId, openBugCount(project, bugs)];\n      chartData.push(data);\n    }\n  }\n\n  return chartData;\n};","map":{"version":3,"sources":["/Users/cameronkingsley/Flatiron/code/Projects/Phase5-React-Cyberbug/Phase5-React-Cyberbug/cyberbug_frontend/src/helpers/projectHelpers.js"],"names":["openBugCount","project","bugs","bugCount","bug","project_id","id","bugStatus","overdueBugCount","date","Date","bugDueDate","dueDate","closedBugCount","totalBugCount","projectHealth","openBugs","totalBugs","score","percent","Math","round","generateProjectStatusBarData","openCount","overdueCount","closedCount","totalBugsCount","openPercent","overduePercent","closedPercent","generatePieChartData","projects","chartData","data","projectId","push"],"mappings":"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","sourcesContent":["// Single Project Functions\n// Open Bugs\nexport const openBugCount = (project, bugs) => {\n  let bugCount = 0;\n  if (bugs) {\n    for (const bug of bugs) {\n      if (bug.project_id === project.id && bug.bugStatus !== \"Complete\") {\n        bugCount += 1;\n      }\n    }\n  }\n  return bugCount;\n};\n\n// Overdue Bugs\nexport const overdueBugCount = (project, bugs) => {\n  let bugCount = 0;\n  const date = new Date();\n  if (bugs) {\n    for (const bug of bugs) {\n      if (bug.bugDueDate) {\n        const dueDate = new Date(bug.bugDueDate);\n        if (\n          bug.project_id === project.id &&\n          dueDate < date &&\n          bug.bugStatus !== \"Complete\"\n        ) {\n          bugCount += 1;\n        }\n      }\n    }\n  }\n  return bugCount;\n};\n\n// Closed Bugs\nexport const closedBugCount = (project, bugs) => {\n  let bugCount = 0;\n  if (bugs) {\n    for (const bug of bugs) {\n      if (bug.project_id === project.id && bug.bugStatus === \"Complete\") {\n        bugCount += 1;\n      }\n    }\n  }\n  return bugCount;\n};\n\n// Total Bugs\nexport const totalBugCount = (project, bugs) => {\n  let bugCount = 0;\n  if (bugs) {\n    for (const bug of bugs) {\n      if (bug.project_id === project.id) {\n        bugCount += 1;\n      }\n    }\n  }\n  return bugCount;\n};\n\n// Project Health\nexport const projectHealth = (project, bugs) => {\n  if (project && bugs) {\n    const openBugs = openBugCount(project, bugs);\n    const totalBugs = totalBugCount(project, bugs);\n    const score = (totalBugs - openBugs) / totalBugs;\n    const percent = Math.round(score * 100);\n    return percent;\n  }\n};\n\n// Project Status Bar Percents\nexport const generateProjectStatusBarData = (project, bugs) => {\n  if (project && bugs) {\n    // open bug %\n    const openCount = openBugCount(project, bugs);\n    // overdue bug %\n    const overdueCount = overdueBugCount(project, bugs);\n    // closed bug %\n    const closedCount = closedBugCount(project, bugs);\n    // these 3 need to add up to 100%\n    const totalBugsCount = totalBugCount(project, bugs);\n\n    const openPercent = Math.round(\n      ((openCount - overdueCount) / totalBugsCount) * 100\n    );\n    const overduePercent = Math.round((overdueCount / totalBugsCount) * 100);\n    const closedPercent = Math.round((closedCount / totalBugsCount) * 100);\n\n    return [openPercent, overduePercent, closedPercent];\n  }\n};\n\n// Multiple Projects Functions\nexport const generatePieChartData = (projects, bugs) => {\n  // Return an array of arrays, each sub array needs to have first value = project id and 2nd = count\n  let chartData = [[\"Bug\", \"Count\"]];\n  if (projects) {\n    for (const project of projects) {\n      const data = [project.projectId, openBugCount(project, bugs)];\n      chartData.push(data);\n    }\n  }\n  return chartData;\n};\n"]},"metadata":{},"sourceType":"module"}