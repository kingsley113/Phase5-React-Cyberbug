{"ast":null,"code":"export const userLogin = userData => {\n  return dispatch => {\n    console.log(\"User Data: \", userData);\n    fetch(\"http://localhost:8000/api/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify(userData)\n    }).then(response => response.json()).then(data => {\n      console.log(\"RESPONSE DATA: \", data);\n\n      if (data.jwt && data.user) {\n        localStorage.setItem(\"jwt\", data.jwt); // TODO: save user info to local storage?\n\n        dispatch({\n          type: \"SET_USER\",\n          user: data.user\n        });\n      } // TODO: add dispatch for error flash message here\n\n    }).catch(error => console.log(error));\n  };\n};\nexport const createUser = userData => {\n  return dispatch => {\n    console.log(\"User Data: \", userData);\n    fetch(\"http://localhost:8000/api/users\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify(userData)\n    }).then(response => response.json()).then(data => {\n      if (data.jwt && data.user) {\n        localStorage.setItem(\"jwt\", data.jwt);\n        dispatch({\n          type: \"SET_USER\",\n          user: data.user\n        });\n      } // TODO: Add dispatch for error flash message here\n\n    }).catch(error => console.log(error));\n  };\n};\nexport const logout = () => {\n  return dispatch => {\n    localStorage.removeItem(\"jwt\");\n    dispatch({\n      type: \"LOGOUT\"\n    });\n  };\n};","map":{"version":3,"sources":["/Users/cameronkingsley/Flatiron/code/Projects/Phase5-React-Cyberbug/Phase5-React-Cyberbug/cyberbug_frontend/src/actions/authActions.js"],"names":["userLogin","userData","dispatch","console","log","fetch","method","headers","Accept","body","JSON","stringify","then","response","json","data","jwt","user","localStorage","setItem","type","catch","error","createUser","logout","removeItem"],"mappings":"AAAA,OAAO,MAAMA,SAAS,GAAIC,QAAD,IAAc;AACrC,SAAQC,QAAD,IAAc;AACnBC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BH,QAA3B;AAEAI,IAAAA,KAAK,CAAC,iCAAD,EAAoC;AACvCC,MAAAA,MAAM,EAAE,MAD+B;AAEvCC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,MAAM,EAAE;AAFD,OAF8B;AAMvCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeV,QAAf;AANiC,KAApC,CAAL,CAQGW,IARH,CAQSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EARtB,EASGF,IATH,CASSG,IAAD,IAAU;AACdZ,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BW,IAA/B;;AACA,UAAIA,IAAI,CAACC,GAAL,IAAYD,IAAI,CAACE,IAArB,EAA2B;AACzBC,QAAAA,YAAY,CAACC,OAAb,CAAqB,KAArB,EAA4BJ,IAAI,CAACC,GAAjC,EADyB,CAEzB;;AACAd,QAAAA,QAAQ,CAAC;AAAEkB,UAAAA,IAAI,EAAE,UAAR;AAAoBH,UAAAA,IAAI,EAAEF,IAAI,CAACE;AAA/B,SAAD,CAAR;AACD,OANa,CAOd;;AACD,KAjBH,EAkBGI,KAlBH,CAkBUC,KAAD,IAAWnB,OAAO,CAACC,GAAR,CAAYkB,KAAZ,CAlBpB;AAmBD,GAtBD;AAuBD,CAxBM;AA0BP,OAAO,MAAMC,UAAU,GAAItB,QAAD,IAAc;AACtC,SAAQC,QAAD,IAAc;AACnBC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BH,QAA3B;AAEAI,IAAAA,KAAK,CAAC,iCAAD,EAAoC;AACvCC,MAAAA,MAAM,EAAE,MAD+B;AAEvCC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,MAAM,EAAE;AAFD,OAF8B;AAMvCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeV,QAAf;AANiC,KAApC,CAAL,CAQGW,IARH,CAQSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EARtB,EASGF,IATH,CASSG,IAAD,IAAU;AACd,UAAIA,IAAI,CAACC,GAAL,IAAYD,IAAI,CAACE,IAArB,EAA2B;AACzBC,QAAAA,YAAY,CAACC,OAAb,CAAqB,KAArB,EAA4BJ,IAAI,CAACC,GAAjC;AACAd,QAAAA,QAAQ,CAAC;AAAEkB,UAAAA,IAAI,EAAE,UAAR;AAAoBH,UAAAA,IAAI,EAAEF,IAAI,CAACE;AAA/B,SAAD,CAAR;AACD,OAJa,CAKd;;AACD,KAfH,EAgBGI,KAhBH,CAgBUC,KAAD,IAAWnB,OAAO,CAACC,GAAR,CAAYkB,KAAZ,CAhBpB;AAiBD,GApBD;AAqBD,CAtBM;AAwBP,OAAO,MAAME,MAAM,GAAG,MAAM;AAC1B,SAAQtB,QAAD,IAAc;AACnBgB,IAAAA,YAAY,CAACO,UAAb,CAAwB,KAAxB;AACAvB,IAAAA,QAAQ,CAAC;AAAEkB,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACD,GAHD;AAID,CALM","sourcesContent":["export const userLogin = (userData) => {\n  return (dispatch) => {\n    console.log(\"User Data: \", userData);\n\n    fetch(\"http://localhost:8000/api/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify(userData),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(\"RESPONSE DATA: \", data);\n        if (data.jwt && data.user) {\n          localStorage.setItem(\"jwt\", data.jwt);\n          // TODO: save user info to local storage?\n          dispatch({ type: \"SET_USER\", user: data.user });\n        }\n        // TODO: add dispatch for error flash message here\n      })\n      .catch((error) => console.log(error));\n  };\n};\n\nexport const createUser = (userData) => {\n  return (dispatch) => {\n    console.log(\"User Data: \", userData);\n\n    fetch(\"http://localhost:8000/api/users\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify(userData),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        if (data.jwt && data.user) {\n          localStorage.setItem(\"jwt\", data.jwt);\n          dispatch({ type: \"SET_USER\", user: data.user });\n        }\n        // TODO: Add dispatch for error flash message here\n      })\n      .catch((error) => console.log(error));\n  };\n};\n\nexport const logout = () => {\n  return (dispatch) => {\n    localStorage.removeItem(\"jwt\");\n    dispatch({ type: \"LOGOUT\" });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}