{"ast":null,"code":"var _jsxFileName = \"/Users/cameronkingsley/Flatiron/code/Projects/Phase5-React-Cyberbug/Phase5-React-Cyberbug/cyberbug_frontend/src/components/pageHeader/activeProjectSelector.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { setActiveProject } from \"../../actions/projectActions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ActiveProjectSelector extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleOnChange = event => {\n      // console.log(\"This would switch to project: \", event.target.value);\n      this.props.setActiveProject(event.target.value);\n    };\n  }\n\n  // setSelectedAttribute = (project) => {\n  // \tproject.projectId === action.projectId\n  // \t\t\t? \"selected\"\n  // \t\t\t: null;\n  // }\n  renderProjectOptions() {\n    if (this.props.projects.length > 0) {\n      return this.props.projects.map(project => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: project.id,\n          children: [project.projectId, \" - \", project.projectTitle]\n        }, project.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 11\n        }, this);\n      });\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"option\", {\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 14\n      }, this);\n    }\n  }\n\n  renderFormIfProjectsLoaded() {\n    if (this.props.activeProject) {\n      /*#__PURE__*/\n      _jsxDEV(\"select\", {\n        name: \"active-project\",\n        id: \"active-project-dropdown\",\n        onChange: this.handleOnChange,\n        value: this.props.activeProject,\n        children: this.renderProjectOptions()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 7\n      }, this);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        children: this.renderFormIfProjectsLoaded()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  console.log(state.projects.projects);\n  let activeProject = null;\n\n  if (state.projects.length > 0) {\n    console.log(\"were in the if statement\");\n    activeProject = state.projects.projects.filter(project => project.activeProject === true);\n  }\n\n  return {\n    activeProject: activeProject\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setActiveProject: id => dispatch(setActiveProject(id))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ActiveProjectSelector);","map":{"version":3,"sources":["/Users/cameronkingsley/Flatiron/code/Projects/Phase5-React-Cyberbug/Phase5-React-Cyberbug/cyberbug_frontend/src/components/pageHeader/activeProjectSelector.js"],"names":["React","Component","connect","setActiveProject","ActiveProjectSelector","handleOnChange","event","props","target","value","renderProjectOptions","projects","length","map","project","id","projectId","projectTitle","renderFormIfProjectsLoaded","activeProject","render","mapStateToProps","state","console","log","filter","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,gBAAT,QAAiC,8BAAjC;;;AAEA,MAAMC,qBAAN,SAAoCH,SAApC,CAA8C;AAAA;AAAA;;AAAA,SAC5CI,cAD4C,GAC1BC,KAAD,IAAW;AAC1B;AACA,WAAKC,KAAL,CAAWJ,gBAAX,CAA4BG,KAAK,CAACE,MAAN,CAAaC,KAAzC;AACD,KAJ2C;AAAA;;AAM5C;AACA;AACA;AACA;AACA;AACAC,EAAAA,oBAAoB,GAAG;AACrB,QAAI,KAAKH,KAAL,CAAWI,QAAX,CAAoBC,MAApB,GAA6B,CAAjC,EAAoC;AAClC,aAAO,KAAKL,KAAL,CAAWI,QAAX,CAAoBE,GAApB,CAAyBC,OAAD,IAAa;AAC1C,4BACE;AACE,UAAA,KAAK,EAAEA,OAAO,CAACC,EADjB;AAAA,qBAMGD,OAAO,CAACE,SANX,SAMyBF,OAAO,CAACG,YANjC;AAAA,WAEOH,OAAO,CAACC,EAFf;AAAA;AAAA;AAAA;AAAA,gBADF;AAUD,OAXM,CAAP;AAYD,KAbD,MAaO;AACL,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;AACF;;AAEDG,EAAAA,0BAA0B,GAAG;AAC3B,QAAI,KAAKX,KAAL,CAAWY,aAAf,EAA8B;AAC5B;AAAA;AACE,QAAA,IAAI,EAAC,gBADP;AAEE,QAAA,EAAE,EAAC,yBAFL;AAGE,QAAA,QAAQ,EAAE,KAAKd,cAHjB;AAIE,QAAA,KAAK,EAAE,KAAKE,KAAL,CAAWY,aAJpB;AAAA,kBAMG,KAAKT,oBAAL;AANH;AAAA;AAAA;AAAA;AAAA;AAQD;AACF;;AAEDU,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,6BAEE;AAAA,kBAAO,KAAKF,0BAAL;AAAP;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;;AAlD2C;;AAoD9C,MAAMG,eAAe,GAAIC,KAAD,IAAW;AACjCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACX,QAAN,CAAeA,QAA3B;AACA,MAAIQ,aAAa,GAAG,IAApB;;AACA,MAAIG,KAAK,CAACX,QAAN,CAAeC,MAAf,GAAwB,CAA5B,EAA+B;AAC7BW,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAL,IAAAA,aAAa,GAAGG,KAAK,CAACX,QAAN,CAAeA,QAAf,CAAwBc,MAAxB,CACbX,OAAD,IAAaA,OAAO,CAACK,aAAR,KAA0B,IADzB,CAAhB;AAGD;;AACD,SAAO;AAAEA,IAAAA,aAAa,EAAEA;AAAjB,GAAP;AACD,CAVD;;AAYA,MAAMO,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLxB,IAAAA,gBAAgB,EAAGY,EAAD,IAAQY,QAAQ,CAACxB,gBAAgB,CAACY,EAAD,CAAjB;AAD7B,GAAP;AAGD,CAJD;;AAMA,eAAeb,OAAO,CACpBmB,eADoB,EAEpBK,kBAFoB,CAAP,CAGbtB,qBAHa,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { setActiveProject } from \"../../actions/projectActions\";\n\nclass ActiveProjectSelector extends Component {\n  handleOnChange = (event) => {\n    // console.log(\"This would switch to project: \", event.target.value);\n    this.props.setActiveProject(event.target.value);\n  };\n\n  // setSelectedAttribute = (project) => {\n  // \tproject.projectId === action.projectId\n  // \t\t\t? \"selected\"\n  // \t\t\t: null;\n  // }\n  renderProjectOptions() {\n    if (this.props.projects.length > 0) {\n      return this.props.projects.map((project) => {\n        return (\n          <option\n            value={project.id}\n            key={project.id}\n            // selected={() => (project.activeProject ? true : false)}\n          >\n            {/* TODO: Add 'selected' to option line if activeproject === true */}\n            {project.projectId} - {project.projectTitle}\n          </option>\n        );\n      });\n    } else {\n      return <option>Loading</option>;\n    }\n  }\n\n  renderFormIfProjectsLoaded() {\n    if (this.props.activeProject) {\n      <select\n        name=\"active-project\"\n        id=\"active-project-dropdown\"\n        onChange={this.handleOnChange}\n        value={this.props.activeProject}\n      >\n        {this.renderProjectOptions()}\n      </select>;\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        {/* TODO: fill in selector content */}\n        <form>{this.renderFormIfProjectsLoaded()}</form>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  console.log(state.projects.projects);\n  let activeProject = null;\n  if (state.projects.length > 0) {\n    console.log(\"were in the if statement\");\n    activeProject = state.projects.projects.filter(\n      (project) => project.activeProject === true\n    );\n  }\n  return { activeProject: activeProject };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setActiveProject: (id) => dispatch(setActiveProject(id)),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ActiveProjectSelector);\n"]},"metadata":{},"sourceType":"module"}